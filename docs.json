{"files":[{"file":"index","dir":"/home/runner/work/guide/guide/guide/","content":"# Introduction\n## What is Discordoo?\nDiscordoo is a next generation API interaction library for Discord. It was built from ground-up\nto give a new look on Discord libraries - fast, scalable and easy to use. Also, we have Waifoo - opinionated\nDiscordoo-based framework for building scalable and performant apps.\n### Why not Eris or Discord.js?\nEris is fast, Discord.js has neat APIs. Discordoo takes best of both worlds.\n\n## Getting started\nWe will quickly overview all essential parts of Discordoo library.\n### Installing\nDiscordoo is publicly available on [npm](https://npmjs.com/discordoo). Install it using `npm install` command.\n```shell\n$ npm install discordoo\n# or if you are yarn adept\n$ yarn add discordoo\n```\n\n### Starting your bot\nAwesome! But our bot doesn't even exist now. Let's fix this!\n\nCreate an `index.ts` file with following contents:\n\n```ts\nimport { createApp } from 'discordoo'\nconst token = 'MY TOP SECRET TOKEN'\n\nconst client = createApp(token).build()\n\nclient.start().then(() => {\n    console.log('Started!')\n})\n```\n\nYou can run this file using `ts-node` or your local `TypeScript` toolchain.\n\n```shell\n$ npx ts-node ./index.ts\n```\n\nYou can also use Discordoo with plain JavaScript:\n```js\nconst { createApp } = require('discordoo')\nconst token = 'MY TOP SECRET TOKEN'\n\nconst client = createApp(token).build()\n\nclient.start().then(() => {\n  console.log('Started!')\n})\n```\n\n \n:tada: You now should see your bot appear online\n\n### Events\nSince Discord is **realtime** messenger, we should receive something in realtime, shouldn't we?\n\nDiscordoo uses concept of events. It is pretty widespread within node.js ecosystem.\nIf you are unfamiliar with it, for some reason, here is quick overview:\n\nEvent listeners listen to **some events**, when they \"hear\" event, it will run **event handler** and pass\n**arguments** to it. Arguments for each event are individual, however aren't exclusive.\n\nTo create an event listener, Discordoo uses `.on` method. It accepts two parameters - a string and a function.\nString is event name, function is an event handler.\n\nOne of the most widespread events is `ready`. It runs once Discordoo has connected to \nDiscord servers and is ready to operate.\n\nPut this piece of code between `main` function and `client` declaration:\n```ts\nclient.on('ready', () => {\n  console.log('ready!')\n})\n```\n\nYou should now see `ready!` message in console after a few seconds of Discordoo reaching Discord servers.\n\n### Entities\nServer, roles, users, server members, messages and even audit logs - these are few examples of entities. \nEntities represent a piece of data associated with Discord. Most of the entities are split into two parts - actions and data.\n\nData is information about entity - name, unique identified(id or snowflake) and other entity-specific things.\n\nActions allow you to change this data. Using actions you can ban user, for example. It will change this member's data, audit logs, guild data.\n\nLet's try to access some!\n\nSecond most used event is `messageCreate`. It fires(runs) each time bot sees a new message appearing.\nLet's try to log which members sent messages.\n\nPut this piece of code somewhere near our `ready` event handler.\n\n```ts\nclient.on('messageCreate', ctx => {\n  console.log(`user ${ctx.author.tag} sent a message!`)\n})\n```\n\nWhat's that `ctx` variable you might ask. It is a context variable. It usually contains entities and other data you might be interested in. You can find more about specific context variables in [API Reference](https://ddoo.dev/api). Just search for `<event-name>EventContext`, for example, [`MessageCreateEventContext`](https://ddoo.dev/api/events/interfaces/MessageCreateEventContext).\n\n:::warning \nDue to recent Discord policies, you have to set up intents to access message's content.\n\nSee [Intents](/docs/guide/intents) for details\n:::\n\n## Congratulations!\n:tada: :tada: :tada: You know all basics of Discordoo! Now you can create your own Discord bots with Discordoo! Head over to next part if you want to dive into Discordoo.\n"},{"file":"api-docs","dir":"/home/runner/work/guide/guide/guide/part-one/","content":"# Api Docs\n**API documentation contains all classes, interfaces, functions, variables and types.**\n\n![class page](https://cdn.discordapp.com/attachments/531549268033404928/1023965452097040384/unknown.png)\n\n## Icons\nEach element on the main list has its own icon. This icon indicates what is on the page\n\n![icons meaning](https://cdn.discordapp.com/attachments/531549268033404928/1023978433530843146/all-icons-desc.png)"},{"file":"concepts","dir":"/home/runner/work/guide/guide/guide/part-one/","content":"# Concepts\nIn this chapter, we will review some basic concepts behind Discordoo and Discord API itself.\n## Discord API\n### Gateway API and REST API\nDo you remember event handlers and entities? Both are backed by Gateway API and REST API respectively.\n\nREST API is mostly used to get entities and perform actions on them. Whereas Gateway API is used to get realtime events from Discord.\n## Providers\nNow back to Discordoo. Internally, Discordoo uses powerful system of **providers**. They allow you to redefine internal behaviour of the library.\nFor example, we can ask Discordoo to consume events not from Gateway API but from RabbitMQ or NATS queue. \n\nHowever, you will rarely use them. But if you will need them, it will become an insanely powerful tool.\n\nYou will learn more about them in following chapters.\n"},{"file":"intents","dir":"/home/runner/work/guide/guide/guide/part-one/","content":"# Intents\nIntents are a new concept introduced by Discord in Gateway v8.\n\nIntents allow you to only accept intents you want. However, Discord has [**privileged intents**](https://discord.com/developers/docs/topics/gateway#privileged-intents). These kind of intents\nneed special approval from Discord to use, unless your bot is smaller than 100 servers.\n\n## Using intents\nIntents are exported under `GatewayIntents` enum. You can see complete list [here](https://ddoo.dev/api/constants/enums/GatewayIntents/). \nThere are also some utility intents in `IntentsUtil` class - `ALL`, `NON_PRIVILEGED` and `PRIVILEGED`.\n\nYou can set intents using `gateway()` chain method:\n```ts\nimport { createApp, GatewayIntents } from 'discordoo'\n\n// you should use | operator to combine intents\nconst intents = GatewayIntents.GUILD_MESSSAGES | GatewayIntents.GUILDS\ncreateApp('token').gateway({ intents }).build()\n```\n\nYou can also use utility intents:\n```ts\nimport { createApp, IntentsUtil } from 'discordoo'\n\ncreateApp('token').gateway({ intents: IntentsUtil.ALL }).build()\n```\n\n### New intents\nDiscord introduces new intents for older API versions as well. You can combine them with `GatewayIntents` enum, just like you would do with plain intents, but with number instead of enum value:\n```ts\nimport { createApp, GatewayIntents } from 'discordoo'\n\n// you should use | operator to combine intents\nconst intents = GatewayIntents.GUILD_MESSSAGES | GatewayIntents.GUILDS | 1 << 12\ncreateApp('token').gateway({ intents }).build()\n```\nyou can check complete list of actual intents [here](https://discord.com/developers/docs/topics/gateway#list-of-intents).\n"}],"time":1664205984918,"generator":"@discordoo/tapok 2.0.23"}